<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<!-- 
  This file serves as our template for standardized GPML pathway visual representations.
  This file can be used for many purposes outside of pathvisio.js, including allowing
  other projects to work better with GPML. For purposes of pathvisio.js, this file will
  be the starting point for our JavaScript rendering of pathways. Every time we want to
  render a GPML file on the browser, we will read a copy of this file into D3.js and
  modify the copy by adding "use" statements, cloning markers, etc. in order to create
  the desired pathway illustration in SVG.

  The XML declaration above is taken from an example from the W3C 
  <http://www.w3.org/TR/SVG/images/struct/use04.svg>,
  except I added:
  encoding="UTF-8" 
  We will want to change standalone to yes if we keep the CSS and
  JS all inside this document.
  
  Doctypes are not needed for SVG, and jwatt discourages their use:
  https://jwatt.org/svg/authoring/.

  Style guides can be arbitrary, but for consistency of SVG markup for the pathvisio.js project,
  I suggest using JS Watt's SVG authoring advice and Google's HTML and JavaScript Guides:
  https://jwatt.org/svg/authoring/
  http://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml
  http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml

  JS Watt's advice is referenced from MDN:
  https://developer.mozilla.org/en-US/docs/Web/SVG

  For testing, we will ensure this SVG file renders correctly with the following browsers and graphics programs:
  Chrome (latest release)
    Uses Skia graphics library
  Firefox (latest release)
    Uses Azure graphics library
  Safari (latest release)
  Android Browser (latest release)
  iOS Browser (latest release)
  Internet Explorer (IE9 and subsequent versions)
  Squiggle SVG browser (latest release)
    Uses Batik 
    Available for download at http://xmlgraphics.apache.org/batik/download.html
  SVG-Edit (latest release)
    Version 2.6 (latest release as of 2013-07-08) available for download at 
    http://svg-edit.googlecode.com/svn/branches/2.6/editor/svg-editor.html
  Inkscape
    Uses livarot rendering engine but is in process of transitioning to Cairo
    Available for download at http://inkscape.org/

  Optional additional tests:
  SvgWeb
  Adobe Illustrator (CS6)
    Either convert SVG to PDF and import PDF into Illustrator or convert SVG to .ai (Illustrator format)
    with a converter like Uniconverter, available for download at
    http://sk1project.org/modules.php?name=Products&product=uniconvertor
    Opening this SVG directly with Illustrator does not work well.
    In the future, we could use Uniconverter on the server to make it possible to download pathway images in
    .ai (Illustrator) and .cdr (CorelDraw) formats.
-->

<svg id="pathway-image"
  version="1.1"
  baseProfile="full"
  xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:ev="http://www.w3.org/2001/xml-events"
  width="100%"
  height="100%"
  onload="positionNodeLabel()">

  <!-- ***************************
       CSS Style Sheet
       ***************************
       
       We could move this CSS into an external style sheet. TODO Would that make maintainability easier?
       -->
 
  <style type="text/css"><![CDATA[
  svg {
    color-interpolation: auto;
    image-rendering: auto;
    shape-rendering: auto;
    vector-effect: non-scaling-stroke;
  }

  text {
    fill: black;
    font-family: Sans-Serif;
    font-size: 12px;
    stroke: none;
    text-anchor: middle;
  }

  .group {
    fill: rgb(180,180,100);
    fill-opacity: 0.098;
    stroke: gray;
    stroke-dasharray: 4,2;
    stroke-miterlimit: 1;
    stroke-width: 1px;
  }

  .complex {
    stroke-dasharray: 1;
  }

  .label {
    font-size: 12px;
    font-weight: bold;
    stroke: none;
  }

  .data-node {
    fill: white;
    fill-opacity: 1;
    stroke: black;
    stroke-dasharray: 0;
    stroke-miterlimit: 1;
    stroke-width: 1px;
  }

  .gene-product {
    stroke: black;
  }

  .gene-product text {
    fill: black;  
    stroke: none;
  }

  .metabolite {
    stroke: blue;
  }

  .metabolite text {
    fill: blue;
  }

  .pathway path {
    stroke: rgb(20,150,30);
  }
  .pathway text {
    fill: rgb(20,150,30);
    font-size: 12px;
    font-weight: bold;
  }

  .shape {
    fill: white;
  }

  .line {
    fill:none;
    stroke: black; 
    stroke-width: 1px; 
  }

  .text-position-path {
    visibility: hidden;
  }
  ]]></style>

    <!-- TODO add styles for line types without styles.
         -->
  
  <g>
    <title>pathway defs for pathvisio.js</title>
    <desc>
    This SVG file contains all the graphical elements (markers and symbols in defs as well as
        style data) used by the program pathvisio.js, which has two components: 
    1) a viewer for transforming GPML biological pathway data into an SVG visual representation and 
    2) an editor for creating both views and models for biological pathways.
    </desc>
  </g>

  <!-- ***************************
       Embedded Scripts 
       ***************************

       We could move this code into an external script. TODO Would that make maintainability easier?
       -->
 
<!-- ECMAScript to truncate (if needed) and position text labels -->
  <script type="application/ecmascript"> <![CDATA[
		function positionNodeLabel(){
      // right now, we are only checking one label. TODO Use forEach to check every label.
      // var nodeLabel = document.getElementsByTagNameNS('http://www.w3.org/2000/svg','text').item(10);
      // nodeLabel.forEach(function() { };);
      var nodeLabel = document.getElementById('text-wbf238');
			var labelBbox = nodeLabel.getBBox();
			var labelText = nodeLabel.textContent;
      var shape = nodeLabel.parentNode.getElementsByTagNameNS('http://www.w3.org/2000/svg','use').item(0);
			var shapeBbox = shape.getBBox();

      // truncate label, if needed
			if ( shapeBbox['width'] < labelBbox['width'] ) {
				labelText = labelText.substring(0, labelText.length - 4);
				nodeLabel.textContent = labelText + "...";
				labelBbox = nodeLabel.getBBox();
				while ( shapeBbox['width'] < labelBbox['width'] ) {
					labelText = labelText.substring(0, labelText.length - 1);
					nodeLabel.textContent = labelText + "...";
					labelBbox = nodeLabel.getBBox();
				};

			};

      // reposition label after making it narrow from truncation. I think this can be removed now
      // that we are using text-anchor="middle". TODO test this SVG in other SVG renderers.
      // It works without this repositioning code in Chrome and Squiggle (Batik).
      /*
			var labelxtransform = -1*(labelBbox["x"]) + shapeBbox['width']/2 - labelBbox["width"]/2;
      var labelytransform = -1*(labelBbox["y"]) + shapeBbox["height"]/2 - labelBbox["height"]/2;
			nodeLabel.setAttribute("transform", "translate(" + labelxtransform + "," + labelytransform + ")");
      */
		};
    
  ]]> </script>

  <defs>

  <!-- ***************************
       Markers (Arrowheads) 
       *************************** -->

    <!-- Here we generate a set of interaction markers for the default color (black). If we need other colors,
         we need to clone the black marker and set the color for the clone to the desired color using d3.js.
        I wish fill="currentColor" worked for markers, but that does not appear to be the case. -->

    <marker id="arrow-start-black" 
      viewBox="0 -6 12 12"
      markerWidth="10" markerHeight="10"
      refX="0" refY="0"
      markerUnits="strokeWidth"
      orient="auto">
      <path d="M0,0 L10,-5 L10,5 Z" stroke="black" stroke-width="1px" fill="black"/>
    </marker>

    <marker id="arrow-end-black"
      viewBox="-12 -6 12 12"
      markerWidth="10" markerHeight="10"
      refX="0" refY="0"
      markerUnits="strokeWidth"
      orient="auto">
      <path d="M0,0 L-10,-5 L-10,5 Z" stroke="black" stroke-width="1px" fill="black"/>
    </marker>

    <marker id="mim-stimulation-start-black"
      viewBox="0 -6 12 12"
      markerWidth="10" markerHeight="10"
      refX="0" refY="0"
      markerUnits="strokeWidth"
      orient="auto">
      <path d="M0,0 L10,-5 L10,5 Z" stroke="black" stroke-width="1px" fill="white"/>
    </marker>

    <marker id="mim-stimulation-end-black"
      viewBox="-12 -6 12 12"
      markerWidth="10" markerHeight="10"
      refX="0" refY="0"
      markerUnits="strokeWidth"
      orient="auto">
      <path d="M0,0 L-10,-5 L-10,5 Z" stroke="black" stroke-width="1px" fill="white"/>
    </marker>

    <marker id="mim-catalysis-start-black"
      viewBox="-6 -6 12 12"
      markerWidth="10" markerHeight="10"
      refX="-5" refY="0"
      markerUnits="strokeWidth"
      orient="auto">
      <circle cx="0" cy="0" r="5px" stroke="black" stroke-width="1px" fill="white"/>
    </marker>

    <marker id="mim-catalysis-end-black"
      viewBox="-6 -6 12 12"
      refX="5" refY="0"
      markerWidth="10" markerHeight="10"
      markerUnits="strokeWidth"
      orient="auto">
      <circle cx="0" cy="0" r="5px" stroke="black" stroke-width="1px" fill="white"/>
    </marker>

  <!-- ***************************
       Symbols (shapes) 
       *************************** -->

    <!-- because of the viewbox, these symbols can be stretched to any size,
         but the stroke width will appear to increase as the symbol increases
         in height or width, ie., some SVG renderers display the E and W sides of 
         a rect transformed with "scale(2, 1)" as thicker than the N and S sides.
         I need to figure out how to correct this. Using the vector-effect attribute set to
          "non-scaling-stroke" works in Chrome, but not all renderers support this attribute.
          TODO Is there a better way to address this?
         -->

    <symbol id="group" viewBox="0 0 120 180" preserveAspectRatio="none">
      <desc>Group</desc>
      <rect x="1" y="1" width="118" height="178" vector-effect="non-scaling-stroke"></rect>
    </symbol>

    <symbol id="shape-rect" viewBox="0 0 100 50" preserveAspectRatio="none">
      <desc>Rectangle</desc>
      <rect x="1" y="1" width="98" height="48" vector-effect="non-scaling-stroke"></rect>
    </symbol>

    <symbol id="shape-rounded-rect" viewBox="0 0 100 50" preserveAspectRatio="none">
      <desc>Rounded Rectangle</desc>
      <rect x="1" y="1" rx="10" ry="10" width="98" height="48" vector-effect="non-scaling-stroke"></rect>
    </symbol>

    <symbol id="shape-oval" viewBox="0 0 100 50" preserveAspectRatio="none">
      <desc>Oval</desc>
      <ellipse cx="49" cy="24" rx="49" ry="24" vector-effect="non-scaling-stroke"></ellipse>
    </symbol>

    <symbol id="shape-mitochondria" viewBox="0 0 100 65.5" preserveAspectRatio="none">
      <desc>Mitochondria</desc>
      <g opacity="0.5" vector-effect="non-scaling-stroke">
        <path
          fill="none"
          stroke="#000000"
          stroke-width="0.7492px"
          stroke-linecap="square"
          stroke-miterlimit="10"
          d="M12.868,16.743    c4.516-0.482,3.961,11.073,8.468,10.519c8.562,0.02,3.086-18.296,10.245-18.418c7.211-0.122,2.325,19.465,9.526,19.135    c7.899-0.364,0.525-21.407,8.42-21.854c7.967-0.448,3.021,20.825,10.999,20.945c6.775,0.104,3.132-17.967,9.894-17.498    c7.443,0.516,0.688,19.397,8.053,20.583c4.914,0.79,4.575-11.867,9.525-11.336c11.517,4.925,8.929,24.503-2.256,29.018    c-3.248,0.454-4.104-6.826-7.361-6.438c-5.785,0.688-4.121,14.484-9.938,14.169c-5.422-0.297-2.304-14.063-7.731-14.124    c-7.204-0.076-3.475,18.8-10.676,18.521c-6.355-0.244-1.791-16.217-8.098-17.024c-5.88-0.752-5.566,14.41-11.412,13.442    c-6.467-1.069-0.486-17.337-6.995-18.112c-3.859-0.459-2.74,9.36-6.627,9.454C2.399,43.865,0.606,21.916,12.868,16.743z"/>
      </g>
      <path
        fill="none"
        stroke="#000000"
        stroke-width="0.7492px"
        stroke-linecap="square"
        stroke-miterlimit="10"
        d="M95.753,46.125  c0,7.808-5.905,14.14-13.189,14.14H17.442c-7.284,0-13.189-6.332-13.189-14.14v-26.22c0-7.81,5.905-14.141,13.189-14.141h65.122  c7.284,0,13.189,6.331,13.189,14.141V46.125z"/>
    </symbol>

    <!-- TODO more markers and symbols to add:
         
         Markers
         *******
         tbar
         mim-inhibition
         mim-transcription
         
         Symbols
         *******
         protein
         pathway
         rna
         unknown
         cell
         nucleus
         complex
         SBGN? Available as SVG here: http://www.sbgn.org/Documents/Templates 
         
          Not sure about adding lines. Should they be only defined in CSS?

          TODO I propose ordering the markers and shapes in this file by category:

          A. Markers
            1. Basic (or else most commonly used) interactions
            2. MIM/SBGN interactions

          B. Symbols 
            1. Data nodes
            2. Graphical elements
            3. Cellular components
            4. SBGN shapes

          C. Templates?

         -->

  </defs>

  <g id="viewport">

    <!-- The visible elements below are for testing and development purposes only. These visible elements as well as
         all comments are to be removed from this file before it is released into production. -->

    <g id="markers" transform="translate(10 20)">

      <!-- **********************************
           Display an example of every marker 
           ********************************** -->

      <text x="60" y="0">Markers (Arrowheads)</text>

      <path id="left boundary"
        d="M10,15 L10,400"
        stroke="green"
        stroke-width="1px"
        fill="none"/>

      <path id="right boundary"
        d="M100,15 L100,400"
        stroke="red"
        stroke-width="1px"
        fill="none"/>

      <path id="path-sfe400"
        d="M10,20 L100,40"
        marker-start="url(#arrow-start-black)"
        marker-end="url(#arrow-end-black)"
        class="line"/>

      <path id="path-sfe400"
        d="M10,40 L100,60"
        marker-start="url(#mim-stimulation-start-black)"
        marker-end="url(#mim-stimulation-end-black)"
        class="line"/>

      <path id="path-sfe400"
        d="M10,60 L100,80"
        marker-start="url(#mim-catalysis-start-black)"
        marker-end="url(#mim-catalysis-end-black)"
        class="line"/>

    </g>

    <g id="shapes" transform="translate(200 20)">

      <!-- *********************************
           Display an example of every shape 
           ********************************* -->

      <text x="60" y="0">Shapes</text>

      <g id="g-wbf243" transform="translate(0 20)" class="group">
        <use id="use-wbf240" x="0" y="0" width="120" height="190" xlink:href="#group" />

        <g id="g-wbf244" transform="translate(10 10)" class="data-node gene-product">
          <use id="use-wbf240" x="0" y="0" width="100" height="50" xlink:href="#shape-rect" />
          <text x="50" y="25" dy="0.3em" id="text-wbf240">node in group</text>
        </g>

        <g id="g-wbf245" transform="translate(10 70)" class="data-node gene-product">
          <use id="use-wbf240" x="0" y="0" width="100" height="50" xlink:href="#shape-rect" />
          <text x="50" y="25" dy="0.3em" id="text-wbf240">node in group</text>
        </g>

        <g id="g-wbf246" transform="translate(10 130)" class="data-node gene-product">
          <use id="use-wbf240" x="0" y="0" width="100" height="50" xlink:href="#shape-rect" />
          <text x="50" y="25" dy="0.3em" id="text-wbf240">node in group</text>
        </g>

      </g>

      <g id="g-wbf240" transform="translate(10 220)" class="data-node gene-product">
        <use id="use-wbf240" x="0" y="0" width="100" height="50" xlink:href="#shape-rect" />
        <text x="50" y="25" dy="0.3em" id="text-wbf240">rect</text>
      </g>

      <g id="g-wbf241" transform="translate(10 280)" class="data-node gene-product">
        <use id="use-wbf241" x="0" y="0" width="100" height="50" xlink:href="#shape-rounded-rect" />
        <text x="50" y="25" dy="0.3em" id="text-wbf241">rounded-rect</text>
      </g>

      <g id="g-wbf242" transform="translate(10 340)" class="data-node gene-product">
        <use id="use-wbf242" x="0" y="0" width="100" height="50" xlink:href="#shape-oval" />
        <text x="50" y="25" dy="0.3em" id="text-wbf242">oval</text>
      </g>

      <use id="use-wbf243" x="10" y="4000" width="100" height="50" xlink:href="#shape-mitochondria" />

    </g>

    <g id="sandbox" transform="translate(500 0)">

      <!-- *******************************
           Sandbox: try out using the defs 
           ******************************* -->

      <g id="g-abc123" transform="translate(10 10)" class="data-node gene-product">

        <!-- the following path allows for positioning the text within and relative to the associated symbol.
        The path starts with x = 0 and y = symbol.height / 2.
        It ends with x = symbol.width and y = symbol.height / 2. -->

        <use id="symbol-abc123" x="0" y="0" width="300" height="100" xlink:href="#shape-rect" />
        <text id="text-abc123" x="150px" y="50px" dy="0.3em" textLength="68px">gene product</text>
      </g>

      <!-- the marker-start for this interaction overlaps the marker start for another. TODO What should
           happen in cases like this? -->

      <path id="path-sfe415"
        d="M165,110 V145 H500 L500,180"
        marker-start="url(#arrow-start-black)"
        marker-end="url(#mim-catalysis-end-black)"
        class="line"/>

      <g id="g-wbf237" transform="translate(300 180)" class="data-node metabolite">
        <use id="use-wbf237" x="0" y="0" width="400px" height="100px" xlink:href="#shape-rounded-rect" />
        <text id="text-wbf237" x="200px" y="50px" dy="0.3em" textLength="52.8125px">metabolite</text>
      </g>

      <path id="path1-sfe416"
        d="M165,110 L105,200"
        marker-start="url(#mim-catalysis-start-black)"
        marker-end="url(#mim-catalysis-end-black)"
        class="line"/>

      <g id="g-wbf238" transform="translate(10 200)" class="data-node metabolite" >
        <use id="use-wbf238" x="0" y="0" width="200" height="25" xlink:href="#shape-rect" />

        <!-- To position labels, we can locate the text anchor point in the vertical and horizontal center
             of the text via "text-anchor: middle" in CSS and set dy="0.3em" for each text element.
             Then we get the bounding box for each text element when it's
             created and then set it in the center of its parent shape with JavaScript:
             x = (width of shape) / 2
               = 200 /2
               = 100px
             y = (height of shape) / 2
               = 25 / 2
               = 12.5px
            Note: SVG-Edit and Inkscape ignore the dy attribute.

            Alternately, we could embed scripts into the SVG to position the label in the center of its
            parent shape:
             x = [(width of shape) - (width of text.getBBox)] / 2
               = (200 - 142.40625) / 2
               = 28.796875
             y = [(height of shape) + (height of text.getBBox)] / 2
               = (25 + 13.625) / 2
               = 19.3125

              Currently, I have the text labels being positioned with the x and y attributes. If a text label is resized
              due to truncation, the label is repositioned with the embedded script.
              The x and y attributes are set as follows:
               x = (width of shape) / 2
               y = [(height of shape) / 2] + 0.3 * (font-size)

            TODO What happens to this calculation if the font is bold?

             For existing shapes with text that overflows the width of its parent shape, we will have 
             JavaScript truncate the text so it fits. Truncation will be indicated with ellipses.
             Should we set the textLength attribute to squish the text to fit? Note that
             Inkscape and Firefox ignore the textLength attribute.
             
             For new shapes, should we set a limit on the text such that no more characters can be typed
             in if the text is longer than the parent shape? 

             Different SVG rendering engines display the same text at different widths, etc.
             We could use something like cufon to convert our fonts to paths:
             http://blog.apps.npr.org/2013/05/31/user-generated-svg.html
             https://github.com/sorccu/cufon/wiki/About
              -->

          <text id="text-wbf238" x="100px" y="16.1px">Another metabolite for the pathvisio.js SVG to render.</text>
      </g>

      <use id="use-wbf239" x="310" y="20" width="100" height="75" xlink:href="#shape-mitochondria" />

    </g>

  </g>

</svg>
