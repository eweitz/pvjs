<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/css" href="../css/pathway-template.css"?>

<!-- 
This file serves as our template for standardized GPML pathway visual representations.
This file can be used for many purposes outside of pathvisio.js, including allowingar
other projects to work better with GPML. For purposes of pathvisio.js, this file will
be the starting point for our JavaScript rendering of pathways. Every time we want to
render a GPML file on the browser, we will read a copy of this file into D3.js and
modify the copy by adding "use" statements, cloning markers, etc. in order to create
the desired pathway illustration in SVG.

The XML declaration above is taken from an example from the W3C 
<http://www.w3.org/TR/SVG/images/struct/use04.svg>,
except I added:
encoding="UTF-8" 
We will want to change standalone to yes if we keep the CSS and
JS all inside this document.

Doctypes are not needed for SVG, and jwatt discourages their use:
https://jwatt.org/svg/authoring/.

Style guides can be arbitrary, but for consistency of SVG markup for the pathvisio.js project,
	I suggest using JS Watt's SVG authoring advice and Google's HTML and JavaScript Guides:
	https://jwatt.org/svg/authoring/
	http://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml
	http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml

JS Watt's advice is referenced from MDN:
https://developer.mozilla.org/en-US/docs/Web/SVG

For testing, we will ensure this SVG file renders correctly with the following browsers and graphics programs:
Chrome (latest release)
	Uses Skia graphics library
Firefox (latest release)
	Uses Azure graphics library
	Safari (latest release)
	Android Browser (latest release)
	iOS Browser (latest release)
	Internet Explorer (IE9 and subsequent versions)
Squiggle SVG browser (latest release)
	Uses Batik 
	Available for download at http://xmlgraphics.apache.org/batik/download.html
SVG-Edit (latest release)
	Version 2.6 (latest release as of 2013-07-08) available for download at 
	http://svg-edit.googlecode.com/svn/branches/2.6/editor/svg-editor.html
	Inkscape
	Uses livarot rendering engine but is in process of transitioning to Cairo
	Available for download at http://inkscape.org/

	Optional additional tests:
	SvgWeb
	Adobe Illustrator (CS6)
		Either convert SVG to PDF and import PDF into Illustrator or convert SVG to .ai (Illustrator format)
		with a converter like Uniconverter, available for download at
		http://sk1project.org/modules.php?name=Products&product=uniconvertor
		Opening this SVG directly with Illustrator does not work well.
		In the future, we could use Uniconverter on the server to make it possible to download pathway images in
		.ai (Illustrator) and .cdr (CorelDraw) formats.

	For more information on SVG, these references are helpful:
	[W3 Spec](http://www.w3.org/TR/SVG/expanded-toc.html)
	[MDN on SVG](https://developer.mozilla.org/en-US/docs/Web/SVG)
	-->

	<svg id="pathway-image"
	version="1.1"
	baseProfile="full"
	xmlns="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:ev="http://www.w3.org/2001/xml-events"
	width="100%"
	height="100%">
	<g>
	<title>pathway defs for pathvisio.js</title>
	<desc>
	This SVG file contains all the graphical elements (markers and symbols in defs as well as
	style data) used by the program pathvisio.js, which has two components: 
	1) a viewer for transforming GPML biological pathway data into an SVG visual representation and 
	2) an editor for creating both views and models for biological pathways.
	</desc>
	</g>
<!-- ECMAScript to change the radius with each click -->
				<script type="application/ecmascript"> <![CDATA[
function init() {
	/// CONFIGURATION 
	/// ====>

	var enablePan = 1; // 1 or 0: enable or disable panning (default enabled)
	var enableZoom = 1; // 1 or 0: enable or disable zooming (default enabled)
	var enableDrag = 0; // 1 or 0: enable or disable dragging (default disabled)
	var zoomScale = 0.2; // Zoom sensitivity


	/// <====
	/// END OF CONFIGURATION 

	var root = document.documentElement.getElementsByTagName("svg")[0];

	root.addEventListener('click', function () {
	  enableZoom = 1;
	});

	var state = 'none', svgRoot = null, stateTarget, stateOrigin, stateTf;

	setupHandlers(root);
}

/**
 * Register handlers
 */
function setupHandlers(root){
	setAttributes(root, {
		"onmouseup" : "handleMouseUp(evt)",
		"onmousedown" : "handleMouseDown(evt)",
		"onmousemove" : "handleMouseMove(evt)",
		//"onmouseout" : "handleMouseUp(evt)", // Decomment this to stop the pan functionality when dragging out of the SVG element
	});

	if(navigator.userAgent.toLowerCase().indexOf('webkit') >= 0)
		window.addEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari
	else
		window.addEventListener('DOMMouseScroll', handleMouseWheel, false); // Others
}

/**
 * Retrieves the root element for SVG manipulation. The element is then cached into the svgRoot global variable.
 */
function getRoot(root) {
	if(svgRoot == null) {
		var r = root.getElementById("viewport") ? root.getElementById("viewport") : root.documentElement, t = r;

		while(t != root) {
			if(t.getAttribute("viewBox")) {
				setCTM(r, t.getCTM());

				t.removeAttribute("viewBox");
			}

			t = t.parentNode;
		}

		svgRoot = r;
	}

	return svgRoot;
}

/**
 * Instance an SVGPoint object with given event coordinates.
 */
function getEventPoint(evt) {
	var p = root.createSVGPoint();
	console.log("p");
	console.log(p);

	p.x = evt.clientX;
	p.y = evt.clientY;

	return p;
}

/**
 * Sets the current transform matrix of an element.
 */
function setCTM(element, matrix) {
	var s = "matrix(" + matrix.a + "," + matrix.b + "," + matrix.c + "," + matrix.d + "," + matrix.e + "," + matrix.f + ")";

	element.setAttribute("transform", s);
}

/**
 * Dumps a matrix to a string (useful for debug).
 */
function dumpMatrix(matrix) {
	var s = "[ " + matrix.a + ", " + matrix.c + ", " + matrix.e + "\n  " + matrix.b + ", " + matrix.d + ", " + matrix.f + "\n  0, 0, 1 ]";

	return s;
}

/**
 * Sets attributes of an element.
 */
function setAttributes(element, attributes){
	for (var i in attributes)
		element.setAttributeNS(null, i, attributes[i]);
}

/**
 * Handle mouse wheel event.
 */
function handleMouseWheel(evt) {
	if(!enableZoom)
		return;

	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var delta;

	if(evt.wheelDelta)
		delta = evt.wheelDelta / 360; // Chrome/Safari
	else
		delta = evt.detail / -9; // Mozilla

	var z = Math.pow(1 + zoomScale, delta);

	var g = getRoot(svgDoc);

	var p = getEventPoint(evt);

	p = p.matrixTransform(g.getCTM().inverse());

	// Compute new scale matrix in current mouse position
	var k = root.createSVGMatrix().translate(p.x, p.y).scale(z).translate(-p.x, -p.y);

	setCTM(g, g.getCTM().multiply(k));

	if(typeof(stateTf) == "undefined")
		stateTf = g.getCTM().inverse();

	stateTf = stateTf.multiply(k.inverse());
}

/**
 * Handle mouse move event.
 */
function handleMouseMove(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(state == 'pan' && enablePan) {
		// Pan mode
		var p = getEventPoint(evt).matrixTransform(stateTf);

		setCTM(g, stateTf.inverse().translate(p.x - stateOrigin.x, p.y - stateOrigin.y));
	} else if(state == 'drag' && enableDrag) {
		// Drag mode
		var p = getEventPoint(evt).matrixTransform(g.getCTM().inverse());

		setCTM(stateTarget, root.createSVGMatrix().translate(p.x - stateOrigin.x, p.y - stateOrigin.y).multiply(g.getCTM().inverse()).multiply(stateTarget.getCTM()));

		stateOrigin = p;
	}
}

/**
 * Handle click event.
 */
function handleMouseDown(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(
		evt.target.tagName == "svg" 
		|| !enableDrag // Pan anyway when drag is disabled and the user clicked on an element 
	) {
		// Pan mode
		state = 'pan';

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	} else {
		// Drag mode
		state = 'drag';

		stateTarget = evt.target;

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	}
}

/**
 * Handle mouse button release event.
 */
function handleMouseUp(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	if(state == 'pan' || state == 'drag') {
		// Quit pan mode
		state = '';
	}
}
  ]]> </script>

	<defs>

    <filter id = "highlight" width = "150%" height = "150%">
        <feOffset result = "offOut" in = "SourceGraphic" dx = "30" dy = "30"/>
        <feGaussianBlur result = "blurOut" in = "offOut" stdDeviation = "10"/>
        <feBlend in = "SourceGraphic" in2 = "blurOut" mode = "normal"/>
    </filter>

	<!-- ***************************
	Markers (Arrowheads) 
	*************************** -->

	<!-- Here we generate a set of interaction markers for the default color (black). If we need other colors,
	we need to clone the black marker and set the color for the clone to the desired color using d3.js.
	I wish fill="currentColor" worked for markers, but that does not appear to be the case. -->

	<!-- Each marker includes a small rectangle with a drawing-board-color-fill color to obscure the
	ends of lines that might otherwise show up beneath the marker. Double lines require their own special
	obscuring rects and are included as a double-line-hack-start/end marker, defined here and added in
	gpml2json.js -->

	<!-- arrow markers: triangular polygons, no stroke -->

	<marker id="arrow-start-black" 
	fill="black"
	markerUnits="strokeWidth"
	markerWidth="12" markerHeight="12"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	<rect class="drawing-board-color-fill" stroke="none" x="0" y="-0.6" width="2" height="1.2" />
	<polygon stroke-width="0" points="12,5 0,0 12,-5"/>
	</marker>

	<marker id="arrow-end-black"
	fill="black"
	markerUnits="strokeWidth"
	markerWidth="12" markerHeight="12"
	orient="auto"
	refX="0" refY="0"
	viewBox="-12 -6 12 12">
	<rect class="drawing-board-color-fill" stroke="none" x="-2" y="-0.6" width="2" height="1.2" />
	<polygon stroke-width="0" points="-12,5 0,0 -12,-5"/>
	</marker>


	<!-- mim-conversion markers: triangular polygons, no stroke -->

	<marker id="mim-conversion-start-black" 
	fill="black"
	markerUnits="strokeWidth"
	markerWidth="12" markerHeight="12"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	<rect class="drawing-board-color-fill" stroke="none" x="0" y="-0.6" width="2" height="1.2" />
	<polygon stroke-width="0" points="11,5 0,0 11,-5"/>
	</marker>

	<marker id="mim-conversion-end-black"
	fill="black"
	markerUnits="strokeWidth"
	markerWidth="12" markerHeight="12"
	orient="auto"
	refX="0" refY="0"
	viewBox="-12 -6 12 12">
	<rect class="drawing-board-color-fill" stroke="none" x="-2" y="-0.6" width="2" height="1.2" />
	<polygon stroke-width="0" points="-11,5 0,0 -11,-5"/>
	</marker>

	<!-- mim-stimulation markers: triangular polygons, drawing-board fill, black stroke -->

	<marker id="mim-stimulation-start-black"
	class="drawing-board-color-fill"
	stroke="black"
	markerWidth="12" markerHeight="12"
	markerUnits="strokeWidth"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	<rect stroke="none" x="0" y="-0.6" width="2" height="1.2" />
	<polygon stroke-width="1" points="11,5 0,0 11,-5"/>
	</marker>

	<marker id="mim-stimulation-end-black"
	class="drawing-board-color-fill"
	stroke="black"
	markerUnits="strokeWidth"
	markerWidth="12" markerHeight="12"
	orient="auto"
	refX="0" refY="0"
	viewBox="-12 -6 12 12">
	<rect stroke="none" x="-2" y="-0.6" width="2" height="1.2" />
	<polygon stroke-width="1" points="-11,5 0,0 -11,-5"/>
	</marker>

	<!-- mim-necessary-stimulation markers: triangular polygons, drawing-board fill, black stroke; and vertical line -->

	<marker id="mim-necessary-stimulation-start-black"
	class="drawing-board-color-fill"
	stroke="black"
	markerWidth="12" markerHeight="12"
	markerUnits="strokeWidth"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 15 12">
	<rect stroke="none" x="0" y="-0.6" width="2" height="1.2" />
	<line fill="none" stroke-width="1" x1="14" y1="-6" x2="14" y2="6"/>
	<polygon stroke-width="1" points="9,5 0,0 9,-5"/>
	</marker>

	<marker id="mim-necessary-stimulation-end-black"
	class="drawing-board-color-fill"
	stroke="black"
	markerUnits="strokeWidth"
	markerWidth="12" markerHeight="12"
	orient="auto"
	refX="0" refY="0"
	viewBox="-15 -6 15 12">
	<rect stroke="none" x="-2" y="-0.6" width="2" height="1.2" />
	<line fill="none" stroke-width="1" x1="-14" y1="-6" x2="-14" y2="6"/>
	<polygon stroke-width="1" points="-9,5 0,0 -9,-5"/>
	</marker>

	<!-- t-bar markers: vertical line; and extended drawing-board rect -->

	<marker id="t-bar-start-black"
	class="drawing-board-color-fill"
	stroke="black"
	markerWidth="16" 
	markerHeight="16"
	markerUnits="strokeWidth"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	<rect stroke="none" x="0" y="-0.6" width="5" height="1.2" />
	<line fill="none" stroke-width="1.6" x1="5" y1="-6" x2="5" y2="6"/>
	</marker>

	<marker id="t-bar-end-black"
	class="drawing-board-color-fill"
	stroke="black"
	markerUnits="strokeWidth"
	markerWidth="16" 
	markerHeight="16"
	orient="auto"
	refX="0" refY="0"
	viewBox="-12 -6 12 12">
	<rect stroke="none" x="-5" y="-0.6" width="5" height="1.2" />
	<line fill="none" stroke-width="1.6" x1="-5" y1="-6" x2="-5" y2="6"/>
	</marker>
	

	<!-- mim-inhibition markers: vertical line; and extended drawing-board rect -->

	<marker id="mim-inhibition-start-black"
	class="drawing-board-color-fill"
	stroke="black"
	markerWidth="16" 
	markerHeight="16"
	markerUnits="strokeWidth"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	<rect stroke="none" x="0" y="-0.6" width="5" height="1.2" />
	<line fill="none" stroke-width="1.6" x1="5" y1="-6" x2="5" y2="6"/>
	</marker>

	<marker id="mim-inhibition-end-black"
	class="drawing-board-color-fill"
	stroke="black"
	markerUnits="strokeWidth"
	markerWidth="16" 
	markerHeight="16"
	orient="auto"
	refX="0" refY="0"
	viewBox="-12 -6 12 12">
	<rect stroke="none" x="-5" y="-0.6" width="5" height="1.2" />
	<line fill="none" stroke-width="1.6" x1="-5" y1="-6" x2="-5" y2="6"/>
	</marker>
	
	<!-- mim-binding markers: four-point polygon, no stroke -->

	<marker id="mim-binding-start-black" 
	fill="black"
	markerUnits="strokeWidth"
	markerWidth="12" markerHeight="12"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	<rect class="drawing-board-color-fill" stroke="none" x="0" y="-0.6" width="2" height="1.2" />
	<polygon stroke-width="0" points="12,6 0,0 12,-6 5,0 "/>
	</marker>

	<marker id="mim-binding-end-black"
	fill="black"
	markerUnits="strokeWidth"
	markerWidth="12" markerHeight="12"
	orient="auto"
	refX="0" refY="0"
	viewBox="-12 -6 12 12">
	<rect class="drawing-board-color-fill" stroke="none" x="-2" y="-0.6" width="2" height="1.2" />
	<polygon stroke-width="0" points="-12,6 0,0 -12,-6 -5,0 "/>
	</marker>

	<!-- mim-modification markers: four-point polygon, no stroke -->

	<marker id="mim-modification-start-black" 
	fill="black"
	markerUnits="strokeWidth"
	markerWidth="12" markerHeight="12"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	<rect class="drawing-board-color-fill" stroke="none" x="0" y="-0.6" width="2" height="1.2" />
	<polygon stroke-width="0" points="12,6 0,0 12,-6 5,0 "/>
	</marker>

	<marker id="mim-modification-end-black"
	fill="black"
	markerUnits="strokeWidth"
	markerWidth="12" markerHeight="12"
	orient="auto"
	refX="0" refY="0"
	viewBox="-12 -6 12 12">
	<rect class="drawing-board-color-fill" stroke="none" x="-2" y="-0.6" width="2" height="1.2" />
	<polygon stroke-width="0" points="-12,6 0,0 -12,-6 -5,0 "/>
	</marker>

	<!-- mim-catalysis markers: circle, drawing-board fill and black stroke -->

	<marker id="mim-catalysis-start-black"
	class="drawing-board-color-fill"
	stroke="black"
	markerHeight="12"
	markerWidth="12"
	markerUnits="strokeWidth"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	<circle cx="5.3" cy="0" r="5.3px" stroke-width="1px"/>
	</marker>

	<marker id="mim-catalysis-end-black"
	class="drawing-board-color-fill"
	stroke="black"
	markerHeight="12"
	markerUnits="strokeWidth"
	markerWidth="12"
	orient="auto"
	refX="5" refY="0"
	viewBox="-6.5 -6 12 12">
	<circle cx="-0.3" cy="0" r="5.3px" stroke-width="1px"/>
	</marker>

	<!-- mim-cleavage markers: two lines and extended drawing-board rect -->

	<marker id="mim-cleavage-start-black" 
	class="drawing-board-color-fill" 
	stroke="black"
	markerHeight="24"
	markerWidth="24"
	markerUnits="strokeWidth"
	orient="auto"
	refX="0" refY="0"
	viewBox="-8 -6 12 12">
	<rect stroke="none" x="0" y="-0.6" width="3.5" height="1.2" />
	<line fill="none" stroke-width=".4" x1="3.7" y1="0" x2="3.7" y2="6"/>	
	<line fill="none" stroke-width=".4" x1="3.7" y1="6" x2="-8" y2="-6"/>	
	</marker>

	<marker id="mim-cleavage-end-black"
	class="drawing-board-color-fill" 
	stroke="black"
	markerHeight="24"
	markerWidth="24"
	markerUnits="strokeWidth"
	orient="auto"
	refX="0" refY="0"
	viewBox="-4 -6 12 12">
	<rect stroke="none" x="-3.5" y="-0.6" width="3.5" height="1.2" />
	<line fill="none" stroke-width=".4" x1="-3.7" y1="0" x2="-3.7" y2="-6"/>	
	<line fill="none" stroke-width=".4" x1="-3.7" y1="-6" x2="8" y2="6"/>	
	</marker>

	<!-- mim-branching-left markers: line and extended drawing-board rect -->

	<marker id="mim-branching-left-start-black" 
	class="drawing-board-color-fill" 
	stroke="black"
	markerHeight="24"
	markerWidth="24"
	markerUnits="strokeWidth"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	<rect stroke="none" x="0" y="-0.6" width="3.5" height="1.2" />
	<line fill="none" stroke-width=".4" x1="3.7" y1="0" x2="0" y2="-6"/>	
	</marker>

	<marker id="mim-branching-left-end-black"
	class="drawing-board-color-fill" 
	stroke="black"
	markerHeight="24"
	markerWidth="24"
	markerUnits="strokeWidth"
	orient="auto"
	refX="0" refY="0"
	viewBox="-12 -6 12 12">
	<rect stroke="none" x="-3.5" y="-0.6" width="3.5" height="1.2" />
	<line fill="none" stroke-width=".4" x1="-3.7" y1="0" x2="0" y2="6"/>	
	</marker>

	<!-- mim-branching-right markers: line and extended drawing-board rect -->

	<marker id="mim-branching-right-start-black" 
	class="drawing-board-color-fill" 
	stroke="black"
	markerHeight="24"
	markerWidth="24"
	markerUnits="strokeWidth"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	<rect stroke="none" x="0" y="-0.6" width="3.5" height="1.2" />
	<line fill="none" stroke-width=".4" x1="3.7" y1="0" x2="0" y2="6"/>
	</marker>

	<marker id="mim-branching-right-end-black"
	class="drawing-board-color-fill" 
	stroke="black"
	markerHeight="24"
	markerWidth="24"
	markerUnits="strokeWidth"
	orient="auto"
	refX="0" refY="0"
	viewBox="-12 -6 12 12">
	<rect stroke="none" x="-3.5" y="-0.6" width="3.5" height="1.2" />
	<line fill="none" stroke-width=".4" x1="-3.7" y1="0" x2="0" y2="-6"/>	
	</marker>

	<!-- mim-transcription-translation markers: two lines and an open trigular polygon, plus extended drawing-board rect -->

	<marker id="mim-transcription-translation-start-black"
	class="drawing-board-color-fill" 
	stroke="black"
	markerHeight="24"
	markerWidth="24"
	markerUnits="strokeWidth"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	<rect stroke="none" x="0" y="-0.6" width="6" height="1.2" />
	<line fill="none" stroke-width=".4" x1="9" y1="0" x2="9" y2="-4"/>
	<line fill="none" stroke-width=".4" x1="9" y1="-4" x2="5" y2="-4"/>
	<polygon stroke-width=".4" points="5,-6 0,-4 5,-2"/>
	</marker>

	<marker id="mim-transcription-translation-end-black"
	class="drawing-board-color-fill" 
	stroke="black"
	markerHeight="24"
	markerWidth="24"
	markerUnits="strokeWidth"
	orient="auto"
	refX="0" refY="0"
	viewBox="-12 -6 12 12">
	<rect stroke="none" x="-6" y="-0.6" width="6" height="1.2" />
	<line fill="none" stroke-width=".4" x1="-9" y1="0" x2="-9" y2="4"/>
	<line fill="none" stroke-width=".4" x1="-9" y1="4" x2="-5" y2="4"/>
	<polygon stroke-width=".4" points="-5,6 0,4 -5,2"/>	
	</marker>
	
	<!-- mim-covalent-bond markers: not much to see here! -->

	<marker id="mim-covalent-bond-start-black"
	markerUnits="strokeWidth"
	markerWidth="10" markerHeight="10"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	</marker>

	<marker id="mim-covalent-bond-end-black"
	markerUnits="strokeWidth"
	markerWidth="10" markerHeight="10"
	orient="auto"
	refX="0" refY="0"
	viewBox="-12 -6 12 12">
	</marker>


	<!-- double-line-hack markers are used in double line handling; they include their own 
	special blank rect to obscure the ends -->

	<marker id="double-line-hack-start"
	markerUnits="strokeWidth"
	markerWidth="10" markerHeight="10"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	<rect class="drawing-board-color-fill" stroke="none" x="0" y="-1.5" width="2.3" height="3" />
	</marker>

	<marker id="double-line-hack-end"
	markerUnits="strokeWidth"
	markerWidth="10" markerHeight="10"
	orient="auto"
	refX="0" refY="0"
	viewBox="-12 -6 12 12">
	<rect class="drawing-board-color-fill" stroke="none" x="-2.3" y="-1.5" width="2.3" height="3" />
	</marker>


	<!-- mim-gap markers: just an extended drawing-board rect -->
	<!-- 
	TODO This could be refactored to make the shape match the viewbox.
	It can overlap the side of the shape, blanking out a small part of it when the edge is at an angle.
	-->

	<marker id="mim-gap-start-black"
	class="drawing-board-color-fill"
	markerUnits="strokeWidth"
	markerWidth="10" markerHeight="10"
	orient="auto"
	refX="0" refY="0"
	viewBox="0 -6 12 12">
	<rect stroke="none" x="-2" y="-0.7" width="8" height="1.4" />
	</marker>

	<marker id="mim-gap-end-black"
	class="drawing-board-color-fill"
	markerUnits="strokeWidth"
	markerWidth="10" markerHeight="10"
	orient="auto"
	refX="0" refY="0"
	viewBox="-12 -6 12 12">
	<rect stroke="none" x="-6" y="-0.7" width="8" height="1.4" />
	</marker>

	<symbol id="none"
	viewBox="0 0 100 100"
	preserveAspectRatio="none" />

	</defs>

	<g id="viewport">
	</g>

</svg>
